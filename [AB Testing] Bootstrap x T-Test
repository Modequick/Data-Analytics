{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e7a06bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:43.985430Z",
     "iopub.status.busy": "2023-05-25T16:50:43.985043Z",
     "iopub.status.idle": "2023-05-25T16:50:43.997288Z",
     "shell.execute_reply": "2023-05-25T16:50:43.996046Z"
    },
    "papermill": {
     "duration": 0.024687,
     "end_time": "2023-05-25T16:50:43.999891",
     "exception": false,
     "start_time": "2023-05-25T16:50:43.975204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "89912b26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.017394Z",
     "iopub.status.busy": "2023-05-25T16:50:44.016987Z",
     "iopub.status.idle": "2023-05-25T16:50:44.194226Z",
     "shell.execute_reply": "2023-05-25T16:50:44.192986Z"
    },
    "papermill": {
     "duration": 0.188905,
     "end_time": "2023-05-25T16:50:44.196639",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.007734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>version</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "      <th>retention_1</th>\n",
       "      <th>retention_7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>116</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>337</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>38</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>377</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>165</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>483</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>488</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>179</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userid  version  sum_gamerounds  retention_1  retention_7\n",
       "0     116  gate_30               3        False        False\n",
       "1     337  gate_30              38         True        False\n",
       "2     377  gate_40             165         True        False\n",
       "3     483  gate_40               1        False        False\n",
       "4     488  gate_40             179         True         True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/mobile-games-ab-testing/cookie_cats.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4974bb62",
   "metadata": {
    "papermill": {
     "duration": 0.007293,
     "end_time": "2023-05-25T16:50:44.211646",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.204353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Business Question \n",
    "\n",
    "## Contex : \n",
    "\n",
    "Cookie Cats is a hugely popular mobile puzzle game developed by Tactile Entertainment. It's a classic \"connect three\"-style puzzle game where the player must connect tiles of the same color to clear the board and win the level\n",
    "\n",
    "As players progress through the levels of the game, they will occasionally encounter gates that force them to wait a non-trivial amount of time or make an in-app purchase to progress. In addition **to driving in-app purchases**, these gates serve the important purpose of giving players an enforced break from playing the game, hopefully resulting in that the player's enjoyment of the game being increased and prolonged.\n",
    "\n",
    "But **where should the gates be placed?** **Initially** the first gate was placed at **level 30**, but in this notebook we're going to analyze an AB-test where we **moved** the first gate in Cookie Cats **from level 30(Control) to level 40 (Treatment)**. In particular, we will look at the impact on player retention. \n",
    "\n",
    "\n",
    "## Business Question : \n",
    "1. ***Retention Rate  (Main Metrics) ***\n",
    "\n",
    "Usually, when we have Retention rate as our main metrics, we have secondary metrics as follows :\n",
    "1. Activation Rate\n",
    "2. Churn Rate \n",
    "3. Revenue Per Customer\n",
    "\n",
    "We have Counter Metrics as follow : \n",
    "1. Customer Acuqisition Cost (CAC)\n",
    "2. Complaint \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2968343",
   "metadata": {
    "papermill": {
     "duration": 0.007269,
     "end_time": "2023-05-25T16:50:44.226637",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.219368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0511923b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.245140Z",
     "iopub.status.busy": "2023-05-25T16:50:44.243957Z",
     "iopub.status.idle": "2023-05-25T16:50:44.404457Z",
     "shell.execute_reply": "2023-05-25T16:50:44.403181Z"
    },
    "papermill": {
     "duration": 0.172551,
     "end_time": "2023-05-25T16:50:44.407343",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.234792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Data Preparation\n",
    "retention_change = {False: 0,\n",
    "                   True : 1}\n",
    "\n",
    "df.replace({\"retention_1\" :retention_change,\n",
    "            \"retention_7\" : retention_change},inplace = True)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#We change this categorical variabel so that it's going to be easier for us to do analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f025ca1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.424767Z",
     "iopub.status.busy": "2023-05-25T16:50:44.424262Z",
     "iopub.status.idle": "2023-05-25T16:50:44.442926Z",
     "shell.execute_reply": "2023-05-25T16:50:44.441864Z"
    },
    "papermill": {
     "duration": 0.03026,
     "end_time": "2023-05-25T16:50:44.445431",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.415171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>version</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "      <th>retention_1</th>\n",
       "      <th>retention_7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>116</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>337</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>377</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>165</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>483</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>488</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>179</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90184</th>\n",
       "      <td>9999441</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90185</th>\n",
       "      <td>9999479</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90186</th>\n",
       "      <td>9999710</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90187</th>\n",
       "      <td>9999768</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90188</th>\n",
       "      <td>9999861</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>90189 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        userid  version  sum_gamerounds  retention_1  retention_7\n",
       "0          116  gate_30               3            0            0\n",
       "1          337  gate_30              38            1            0\n",
       "2          377  gate_40             165            1            0\n",
       "3          483  gate_40               1            0            0\n",
       "4          488  gate_40             179            1            1\n",
       "...        ...      ...             ...          ...          ...\n",
       "90184  9999441  gate_40              97            1            0\n",
       "90185  9999479  gate_40              30            0            0\n",
       "90186  9999710  gate_30              28            1            0\n",
       "90187  9999768  gate_40              51            1            0\n",
       "90188  9999861  gate_40              16            0            0\n",
       "\n",
       "[90189 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5cfd6f2",
   "metadata": {
    "papermill": {
     "duration": 0.007641,
     "end_time": "2023-05-25T16:50:44.461281",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.453640",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ef7711d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.479161Z",
     "iopub.status.busy": "2023-05-25T16:50:44.478771Z",
     "iopub.status.idle": "2023-05-25T16:50:44.484288Z",
     "shell.execute_reply": "2023-05-25T16:50:44.483172Z"
    },
    "papermill": {
     "duration": 0.017985,
     "end_time": "2023-05-25T16:50:44.487191",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.469206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total of the data rows are : 90189\n"
     ]
    }
   ],
   "source": [
    "#The length of the data \n",
    "print( \"The total of the data rows are :\",len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a3cb1f8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.505471Z",
     "iopub.status.busy": "2023-05-25T16:50:44.505103Z",
     "iopub.status.idle": "2023-05-25T16:50:44.520319Z",
     "shell.execute_reply": "2023-05-25T16:50:44.518924Z"
    },
    "papermill": {
     "duration": 0.027157,
     "end_time": "2023-05-25T16:50:44.522709",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.495552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total user_id are : 90189\n"
     ]
    }
   ],
   "source": [
    "#How many user_id are there \n",
    "print(\"The total user_id are :\",df[\"userid\"].nunique() )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b10210e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.541115Z",
     "iopub.status.busy": "2023-05-25T16:50:44.540653Z",
     "iopub.status.idle": "2023-05-25T16:50:44.556758Z",
     "shell.execute_reply": "2023-05-25T16:50:44.555488Z"
    },
    "papermill": {
     "duration": 0.028345,
     "end_time": "2023-05-25T16:50:44.559338",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.530993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Is there anyone with zero sum_game?\n",
    "\n",
    "df[df[\"sum_gamerounds\"]==0]\n",
    "#yes they are, we need to remove this because our main objective is retention, while this user_id is not playing\n",
    "\n",
    "df =df[df[\"sum_gamerounds\"]!= 0 ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f0a0c0d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.577470Z",
     "iopub.status.busy": "2023-05-25T16:50:44.577076Z",
     "iopub.status.idle": "2023-05-25T16:50:44.600015Z",
     "shell.execute_reply": "2023-05-25T16:50:44.598786Z"
    },
    "papermill": {
     "duration": 0.034921,
     "end_time": "2023-05-25T16:50:44.602405",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.567484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gate_40    50.39\n",
       "gate_30    49.61\n",
       "Name: version, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Proportion for Control And Treatment ()\n",
    "\n",
    "round ((df[\"version\"].value_counts() /len(df)) * 100 ,2)\n",
    "\n",
    "#we see that the proportion is equal (even though not identical) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3ae5107c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.621080Z",
     "iopub.status.busy": "2023-05-25T16:50:44.620656Z",
     "iopub.status.idle": "2023-05-25T16:50:44.658392Z",
     "shell.execute_reply": "2023-05-25T16:50:44.657243Z"
    },
    "papermill": {
     "duration": 0.049923,
     "end_time": "2023-05-25T16:50:44.660871",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.610948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "version\n",
       "gate_30    50.12\n",
       "gate_40    49.88\n",
       "Name: sum_gamerounds, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sum_gamerounds for Control vs Treatment\n",
    "\n",
    "round(df.groupby(\"version\")[\"sum_gamerounds\"].sum() / sum(df[\"sum_gamerounds\"]) * 100,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b1620274",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.679589Z",
     "iopub.status.busy": "2023-05-25T16:50:44.679173Z",
     "iopub.status.idle": "2023-05-25T16:50:44.727165Z",
     "shell.execute_reply": "2023-05-25T16:50:44.725893Z"
    },
    "papermill": {
     "duration": 0.060101,
     "end_time": "2023-05-25T16:50:44.729481",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.669380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average retention_1 for our control is : 46.75%\n",
      "The average retention_7 for our control is : 19.84%\n"
     ]
    }
   ],
   "source": [
    "#What is the average retention for control data ?\n",
    "print (\"The average retention_1 for our control is :\",round(df[df[\"version\"] == \"gate_30\"][\"retention_1\"].mean() * 100,2).astype('str')+\"%\")\n",
    "print (\"The average retention_7 for our control is :\",round(df[df[\"version\"] == \"gate_30\"][\"retention_7\"].mean() * 100,2).astype('str')+\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "34ccd80d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.748905Z",
     "iopub.status.busy": "2023-05-25T16:50:44.748491Z",
     "iopub.status.idle": "2023-05-25T16:50:44.795063Z",
     "shell.execute_reply": "2023-05-25T16:50:44.793578Z"
    },
    "papermill": {
     "duration": 0.059206,
     "end_time": "2023-05-25T16:50:44.797628",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.738422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average retention_1 for our treatment is : 46.22%\n",
      "The average retention_7 for our treatment is : 19.03%\n"
     ]
    }
   ],
   "source": [
    "#What is the average retention for Treatment data ?\n",
    "print (\"The average retention_1 for our treatment is :\",round(df[df[\"version\"] == \"gate_40\"][\"retention_1\"].mean() * 100,2).astype('str')+\"%\")\n",
    "print (\"The average retention_7 for our treatment is :\",round(df[df[\"version\"] == \"gate_40\"][\"retention_7\"].mean() * 100,2).astype('str')+\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0c76517",
   "metadata": {
    "papermill": {
     "duration": 0.008451,
     "end_time": "2023-05-25T16:50:44.815123",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.806672",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We see that the average between control and treatment have a very small difference, and it's easy to assume if there is no statistical difference. But it might be because it comes from 1 sample. We will use bootstrap and combine it with t-test to see if there is any signifiance difference in the future."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1d8e0fc",
   "metadata": {
    "papermill": {
     "duration": 0.008498,
     "end_time": "2023-05-25T16:50:44.832261",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.823763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Hypothesis Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2ed3454f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:44.851264Z",
     "iopub.status.busy": "2023-05-25T16:50:44.850866Z",
     "iopub.status.idle": "2023-05-25T16:50:57.518318Z",
     "shell.execute_reply": "2023-05-25T16:50:57.517068Z"
    },
    "papermill": {
     "duration": 12.680076,
     "end_time": "2023-05-25T16:50:57.521036",
     "exception": false,
     "start_time": "2023-05-25T16:50:44.840960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bootstrap_size = 300\n",
    "\n",
    "retention_1_list = []\n",
    "retention_7_list = []\n",
    "\n",
    "\n",
    "for i in range (bootstrap_size):\n",
    "    retention_1 = df.sample(frac=1, replace=True).groupby(\"version\")['retention_1'].mean()\n",
    "    retention_1_list.append(retention_1)\n",
    "    retention_7 = df.sample(frac = 1, replace = True).groupby(\"version\")[\"retention_7\"].mean()\n",
    "    retention_7_list.append(retention_7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "35ac0dbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:57.540781Z",
     "iopub.status.busy": "2023-05-25T16:50:57.540310Z",
     "iopub.status.idle": "2023-05-25T16:50:59.296140Z",
     "shell.execute_reply": "2023-05-25T16:50:59.294884Z"
    },
    "papermill": {
     "duration": 1.768499,
     "end_time": "2023-05-25T16:50:59.298561",
     "exception": false,
     "start_time": "2023-05-25T16:50:57.530062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1300x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#make into dataframe \n",
    "bootstrap_retention_1 = pd.DataFrame (retention_1_list)\n",
    "bootstrap_retention_7 = pd.DataFrame(retention_7_list)\n",
    "\n",
    "fig, (ax1,ax2) = plt.subplots(1,2, sharey = True ,figsize = (13,5))\n",
    "bootstrap_retention_1.plot.kde(ax = ax1)\n",
    "ax1.set_title(\"1-day retention\")\n",
    "ax1.set_xlabel(\"Mean\")\n",
    "bootstrap_retention_7.plot.kde(ax = ax2 )\n",
    "ax2.set_title(\"7-day retention\")\n",
    "ax2.set_xlabel(\"Mean\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1a8a5e8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:59.320827Z",
     "iopub.status.busy": "2023-05-25T16:50:59.319756Z",
     "iopub.status.idle": "2023-05-25T16:50:59.331272Z",
     "shell.execute_reply": "2023-05-25T16:50:59.329924Z"
    },
    "papermill": {
     "duration": 0.025452,
     "end_time": "2023-05-25T16:50:59.333849",
     "exception": false,
     "start_time": "2023-05-25T16:50:59.308397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-Statistic: 27.54826789815761\n",
      "P-Value: 8.692871209500855e-109\n"
     ]
    }
   ],
   "source": [
    "import scipy.stats as stats\n",
    "bootstrap_retention_1\n",
    "\n",
    "t_statistic, p_value = stats.ttest_ind(bootstrap_retention_1[\"gate_30\"], bootstrap_retention_1[\"gate_40\"],alternative = \"greater\")\n",
    "# Print the results\n",
    "print(\"T-Statistic:\", t_statistic)\n",
    "print(\"P-Value:\", p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "10974ea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-25T16:50:59.356305Z",
     "iopub.status.busy": "2023-05-25T16:50:59.355305Z",
     "iopub.status.idle": "2023-05-25T16:50:59.362581Z",
     "shell.execute_reply": "2023-05-25T16:50:59.361368Z"
    },
    "papermill": {
     "duration": 0.021347,
     "end_time": "2023-05-25T16:50:59.365141",
     "exception": false,
     "start_time": "2023-05-25T16:50:59.343794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-Statistic: 55.44936797140332\n",
      "P-Value: 3.5993342391611325e-238\n"
     ]
    }
   ],
   "source": [
    "t_statistic, p_value = stats.ttest_ind(bootstrap_retention_7[\"gate_30\"], bootstrap_retention_7[\"gate_40\"],alternative = \"greater\")\n",
    "# Print the results\n",
    "print(\"T-Statistic:\", t_statistic)\n",
    "print(\"P-Value:\", p_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "839fa499",
   "metadata": {
    "papermill": {
     "duration": 0.009709,
     "end_time": "2023-05-25T16:50:59.385385",
     "exception": false,
     "start_time": "2023-05-25T16:50:59.375676",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Retention_1 : \n",
    "H0 : mean_control == mean_treatment \n",
    "\n",
    "H1 : mean_control != mean_treatment \n",
    "\n",
    "p_value = 0.05 ; \n",
    "\n",
    "we see that our data p-value as follow : (8.6e-128) < 0.05.\n",
    "Hence, since it's smaller than p-value, we reject H0. We can conclude if there is a **signifiance mean difference between the group**.\n",
    "However, by seeing the graph above, we can see that the **mean difference is getting worst**. So, we will **stay using the gate_30 (control)**\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "### Retention_7 : \n",
    "H0 : mean_control == mean_treatment \n",
    "\n",
    "H1 : mean_control != mean_treatment\n",
    "\n",
    "p_value = 0.05 \n",
    "\n",
    "we see that our data p-value as follow : (1.3e-227) < 0.05.\n",
    "Hence, since it's smaller than p-value, we reject H0. We can conclude if there is a **signifiance mean difference between the group**.\n",
    "However, by seeing the graph above, we can see that the **mean difference is getting worst**. So, we will **stay using the gate_30 (control)**\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebe32a1d",
   "metadata": {
    "papermill": {
     "duration": 0.009903,
     "end_time": "2023-05-25T16:50:59.405225",
     "exception": false,
     "start_time": "2023-05-25T16:50:59.395322",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b545eea4",
   "metadata": {
    "papermill": {
     "duration": 0.009494,
     "end_time": "2023-05-25T16:50:59.424539",
     "exception": false,
     "start_time": "2023-05-25T16:50:59.415045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2a7feb5",
   "metadata": {
    "papermill": {
     "duration": 0.009609,
     "end_time": "2023-05-25T16:50:59.444091",
     "exception": false,
     "start_time": "2023-05-25T16:50:59.434482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 30.520001,
   "end_time": "2023-05-25T16:51:00.477287",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-05-25T16:50:29.957286",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
