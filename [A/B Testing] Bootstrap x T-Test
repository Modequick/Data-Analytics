{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42e794cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.424579Z",
     "iopub.status.busy": "2023-05-23T15:17:01.423715Z",
     "iopub.status.idle": "2023-05-23T15:17:01.435275Z",
     "shell.execute_reply": "2023-05-23T15:17:01.434428Z"
    },
    "papermill": {
     "duration": 0.021382,
     "end_time": "2023-05-23T15:17:01.437487",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.416105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "33cb159b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.450334Z",
     "iopub.status.busy": "2023-05-23T15:17:01.449604Z",
     "iopub.status.idle": "2023-05-23T15:17:01.616342Z",
     "shell.execute_reply": "2023-05-23T15:17:01.615342Z"
    },
    "papermill": {
     "duration": 0.17588,
     "end_time": "2023-05-23T15:17:01.618923",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.443043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>version</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "      <th>retention_1</th>\n",
       "      <th>retention_7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>116</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>337</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>38</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>377</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>165</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>483</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>488</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>179</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   userid  version  sum_gamerounds  retention_1  retention_7\n",
       "0     116  gate_30               3        False        False\n",
       "1     337  gate_30              38         True        False\n",
       "2     377  gate_40             165         True        False\n",
       "3     483  gate_40               1        False        False\n",
       "4     488  gate_40             179         True         True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/mobile-games-ab-testing/cookie_cats.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3e8fd5d",
   "metadata": {
    "papermill": {
     "duration": 0.005125,
     "end_time": "2023-05-23T15:17:01.629629",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.624504",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Business Question \n",
    "\n",
    "## Contex : \n",
    "\n",
    "Cookie Cats is a hugely popular mobile puzzle game developed by Tactile Entertainment. It's a classic \"connect three\"-style puzzle game where the player must connect tiles of the same color to clear the board and win the level\n",
    "\n",
    "As players progress through the levels of the game, they will occasionally encounter gates that force them to wait a non-trivial amount of time or make an in-app purchase to progress. In addition **to driving in-app purchases**, these gates serve the important purpose of giving players an enforced break from playing the game, hopefully resulting in that the player's enjoyment of the game being increased and prolonged.\n",
    "\n",
    "But **where should the gates be placed?** **Initially** the first gate was placed at **level 30**, but in this notebook we're going to analyze an AB-test where we **moved** the first gate in Cookie Cats **from level 30(Control) to level 40 (Treatment)**. In particular, we will look at the impact on player retention. \n",
    "\n",
    "\n",
    "## Business Question : \n",
    "1. ***Retention Rate  (Main Metrics) ***\n",
    "\n",
    "Usually, when we have Retention rate as our main metrics, we have secondary metrics as follows :\n",
    "1. Activation Rate\n",
    "2. Churn Rate \n",
    "3. Revenue Per Customer\n",
    "\n",
    "We have Counter Metrics as follow : \n",
    "1. Customer Acuqisition Cost (CAC)\n",
    "2. Complaint \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a7ac4c0",
   "metadata": {
    "papermill": {
     "duration": 0.005106,
     "end_time": "2023-05-23T15:17:01.640118",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.635012",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "435862c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.652622Z",
     "iopub.status.busy": "2023-05-23T15:17:01.652230Z",
     "iopub.status.idle": "2023-05-23T15:17:01.728603Z",
     "shell.execute_reply": "2023-05-23T15:17:01.727425Z"
    },
    "papermill": {
     "duration": 0.085744,
     "end_time": "2023-05-23T15:17:01.731160",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.645416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Data Preparation\n",
    "retention_change = {False: 0,\n",
    "                   True : 1}\n",
    "\n",
    "df.replace({\"retention_1\" :retention_change,\n",
    "            \"retention_7\" : retention_change},inplace = True)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#We change this categorical variabel so that it's going to be easier for us to do analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4d5c02f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.743729Z",
     "iopub.status.busy": "2023-05-23T15:17:01.743346Z",
     "iopub.status.idle": "2023-05-23T15:17:01.761342Z",
     "shell.execute_reply": "2023-05-23T15:17:01.760335Z"
    },
    "papermill": {
     "duration": 0.026769,
     "end_time": "2023-05-23T15:17:01.763572",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.736803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userid</th>\n",
       "      <th>version</th>\n",
       "      <th>sum_gamerounds</th>\n",
       "      <th>retention_1</th>\n",
       "      <th>retention_7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>116</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>337</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>377</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>165</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>483</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>488</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>179</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90184</th>\n",
       "      <td>9999441</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90185</th>\n",
       "      <td>9999479</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90186</th>\n",
       "      <td>9999710</td>\n",
       "      <td>gate_30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90187</th>\n",
       "      <td>9999768</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90188</th>\n",
       "      <td>9999861</td>\n",
       "      <td>gate_40</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>90189 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        userid  version  sum_gamerounds  retention_1  retention_7\n",
       "0          116  gate_30               3            0            0\n",
       "1          337  gate_30              38            1            0\n",
       "2          377  gate_40             165            1            0\n",
       "3          483  gate_40               1            0            0\n",
       "4          488  gate_40             179            1            1\n",
       "...        ...      ...             ...          ...          ...\n",
       "90184  9999441  gate_40              97            1            0\n",
       "90185  9999479  gate_40              30            0            0\n",
       "90186  9999710  gate_30              28            1            0\n",
       "90187  9999768  gate_40              51            1            0\n",
       "90188  9999861  gate_40              16            0            0\n",
       "\n",
       "[90189 rows x 5 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fff4c79",
   "metadata": {
    "papermill": {
     "duration": 0.005903,
     "end_time": "2023-05-23T15:17:01.775300",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.769397",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a9c9a60a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.788470Z",
     "iopub.status.busy": "2023-05-23T15:17:01.788124Z",
     "iopub.status.idle": "2023-05-23T15:17:01.793170Z",
     "shell.execute_reply": "2023-05-23T15:17:01.791940Z"
    },
    "papermill": {
     "duration": 0.014857,
     "end_time": "2023-05-23T15:17:01.795903",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.781046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total of the data rows are : 90189\n"
     ]
    }
   ],
   "source": [
    "#The length of the data \n",
    "print( \"The total of the data rows are :\",len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "03d998fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.810230Z",
     "iopub.status.busy": "2023-05-23T15:17:01.809723Z",
     "iopub.status.idle": "2023-05-23T15:17:01.828462Z",
     "shell.execute_reply": "2023-05-23T15:17:01.826793Z"
    },
    "papermill": {
     "duration": 0.028227,
     "end_time": "2023-05-23T15:17:01.830955",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.802728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total user_id are : 90189\n"
     ]
    }
   ],
   "source": [
    "#How many user_id are there \n",
    "print(\"The total user_id are :\",df[\"userid\"].nunique() )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ed1c8c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.847144Z",
     "iopub.status.busy": "2023-05-23T15:17:01.846237Z",
     "iopub.status.idle": "2023-05-23T15:17:01.864416Z",
     "shell.execute_reply": "2023-05-23T15:17:01.863282Z"
    },
    "papermill": {
     "duration": 0.028401,
     "end_time": "2023-05-23T15:17:01.866977",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.838576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Is there anyone with zero sum_game?\n",
    "\n",
    "df[df[\"sum_gamerounds\"]==0]\n",
    "#yes they are, we need to remove this because our main objective is retention, while this user_id is not playing\n",
    "\n",
    "df =df[df[\"sum_gamerounds\"]!= 0 ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ef03487f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.884133Z",
     "iopub.status.busy": "2023-05-23T15:17:01.883766Z",
     "iopub.status.idle": "2023-05-23T15:17:01.901735Z",
     "shell.execute_reply": "2023-05-23T15:17:01.900902Z"
    },
    "papermill": {
     "duration": 0.029858,
     "end_time": "2023-05-23T15:17:01.903979",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.874121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "gate_40    50.39\n",
       "gate_30    49.61\n",
       "Name: version, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Proportion for Control And Treatment ()\n",
    "\n",
    "round ((df[\"version\"].value_counts() /len(df)) * 100 ,2)\n",
    "\n",
    "#we see that the proportion is equal (even though not identical) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "57fac2a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.921713Z",
     "iopub.status.busy": "2023-05-23T15:17:01.919984Z",
     "iopub.status.idle": "2023-05-23T15:17:01.951237Z",
     "shell.execute_reply": "2023-05-23T15:17:01.950047Z"
    },
    "papermill": {
     "duration": 0.043514,
     "end_time": "2023-05-23T15:17:01.953824",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.910310",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "version\n",
       "gate_30    50.12\n",
       "gate_40    49.88\n",
       "Name: sum_gamerounds, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sum_gamerounds for Control vs Treatment\n",
    "\n",
    "round(df.groupby(\"version\")[\"sum_gamerounds\"].sum() / sum(df[\"sum_gamerounds\"]) * 100,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f6eb9c0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:01.968858Z",
     "iopub.status.busy": "2023-05-23T15:17:01.967920Z",
     "iopub.status.idle": "2023-05-23T15:17:02.001950Z",
     "shell.execute_reply": "2023-05-23T15:17:02.000699Z"
    },
    "papermill": {
     "duration": 0.044291,
     "end_time": "2023-05-23T15:17:02.004700",
     "exception": false,
     "start_time": "2023-05-23T15:17:01.960409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average retention_1 for our control is : 46.75%\n",
      "The average retention_7 for our control is : 19.84%\n"
     ]
    }
   ],
   "source": [
    "#What is the average retention for control data ?\n",
    "print (\"The average retention_1 for our control is :\",round(df[df[\"version\"] == \"gate_30\"][\"retention_1\"].mean() * 100,2).astype('str')+\"%\")\n",
    "print (\"The average retention_7 for our control is :\",round(df[df[\"version\"] == \"gate_30\"][\"retention_7\"].mean() * 100,2).astype('str')+\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "50087169",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:02.023874Z",
     "iopub.status.busy": "2023-05-23T15:17:02.023472Z",
     "iopub.status.idle": "2023-05-23T15:17:02.051483Z",
     "shell.execute_reply": "2023-05-23T15:17:02.050358Z"
    },
    "papermill": {
     "duration": 0.040609,
     "end_time": "2023-05-23T15:17:02.054174",
     "exception": false,
     "start_time": "2023-05-23T15:17:02.013565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average retention_1 for our treatment is : 46.22%\n",
      "The average retention_7 for our treatment is : 19.03%\n"
     ]
    }
   ],
   "source": [
    "#What is the average retention for Treatment data ?\n",
    "print (\"The average retention_1 for our treatment is :\",round(df[df[\"version\"] == \"gate_40\"][\"retention_1\"].mean() * 100,2).astype('str')+\"%\")\n",
    "print (\"The average retention_7 for our treatment is :\",round(df[df[\"version\"] == \"gate_40\"][\"retention_7\"].mean() * 100,2).astype('str')+\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a1ef690",
   "metadata": {
    "papermill": {
     "duration": 0.007835,
     "end_time": "2023-05-23T15:17:02.071136",
     "exception": false,
     "start_time": "2023-05-23T15:17:02.063301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We see that the average between control and treatment have a very small difference, and it's easy to assume if there is no statistical difference. But it might be because it comes from 1 sample. We will use bootstrap and combine it with t-test to see if there is any signifiance difference in the future."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "138ea9bd",
   "metadata": {
    "papermill": {
     "duration": 0.006517,
     "end_time": "2023-05-23T15:17:02.084094",
     "exception": false,
     "start_time": "2023-05-23T15:17:02.077577",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Hypothesis Testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6424fe50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:02.098802Z",
     "iopub.status.busy": "2023-05-23T15:17:02.098437Z",
     "iopub.status.idle": "2023-05-23T15:17:10.990684Z",
     "shell.execute_reply": "2023-05-23T15:17:10.989637Z"
    },
    "papermill": {
     "duration": 8.902768,
     "end_time": "2023-05-23T15:17:10.993292",
     "exception": false,
     "start_time": "2023-05-23T15:17:02.090524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bootstrap_size = 300\n",
    "\n",
    "retention_1_list = []\n",
    "retention_7_list = []\n",
    "\n",
    "\n",
    "for i in range (bootstrap_size):\n",
    "    retention_1 = df.sample(frac=1, replace=True).groupby(\"version\")['retention_1'].mean()\n",
    "    retention_1_list.append(retention_1)\n",
    "    retention_7 = df.sample(frac = 1, replace = True).groupby(\"version\")[\"retention_7\"].mean()\n",
    "    retention_7_list.append(retention_7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2f8f27f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:11.007583Z",
     "iopub.status.busy": "2023-05-23T15:17:11.007212Z",
     "iopub.status.idle": "2023-05-23T15:17:12.475285Z",
     "shell.execute_reply": "2023-05-23T15:17:12.474023Z"
    },
    "papermill": {
     "duration": 1.477859,
     "end_time": "2023-05-23T15:17:12.477546",
     "exception": false,
     "start_time": "2023-05-23T15:17:10.999687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1300x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#make into dataframe \n",
    "bootstrap_retention_1 = pd.DataFrame (retention_1_list)\n",
    "bootstrap_retention_7 = pd.DataFrame(retention_7_list)\n",
    "\n",
    "fig, (ax1,ax2) = plt.subplots(1,2, sharey = True ,figsize = (13,5))\n",
    "bootstrap_retention_1.plot.kde(ax = ax1)\n",
    "ax1.set_title(\"1-day retention\")\n",
    "ax1.set_xlabel(\"Mean\")\n",
    "bootstrap_retention_7.plot.kde(ax = ax2 )\n",
    "ax2.set_title(\"7-day retention\")\n",
    "ax2.set_xlabel(\"Mean\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "677ead26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:12.494278Z",
     "iopub.status.busy": "2023-05-23T15:17:12.493916Z",
     "iopub.status.idle": "2023-05-23T15:17:12.503543Z",
     "shell.execute_reply": "2023-05-23T15:17:12.502142Z"
    },
    "papermill": {
     "duration": 0.020559,
     "end_time": "2023-05-23T15:17:12.505712",
     "exception": false,
     "start_time": "2023-05-23T15:17:12.485153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-Statistic: 26.582626182598233\n",
      "P-Value: 1.1149329045586596e-103\n"
     ]
    }
   ],
   "source": [
    "import scipy.stats as stats\n",
    "bootstrap_retention_1\n",
    "\n",
    "t_statistic, p_value = stats.ttest_ind(bootstrap_retention_1[\"gate_30\"], bootstrap_retention_1[\"gate_40\"],alternative = \"greater\")\n",
    "# Print the results\n",
    "print(\"T-Statistic:\", t_statistic)\n",
    "print(\"P-Value:\", p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "53d328b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-05-23T15:17:12.522602Z",
     "iopub.status.busy": "2023-05-23T15:17:12.521641Z",
     "iopub.status.idle": "2023-05-23T15:17:12.528454Z",
     "shell.execute_reply": "2023-05-23T15:17:12.527378Z"
    },
    "papermill": {
     "duration": 0.017419,
     "end_time": "2023-05-23T15:17:12.530566",
     "exception": false,
     "start_time": "2023-05-23T15:17:12.513147",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-Statistic: 54.79368198213968\n",
      "P-Value: 1.3751335765180233e-235\n"
     ]
    }
   ],
   "source": [
    "t_statistic, p_value = stats.ttest_ind(bootstrap_retention_7[\"gate_30\"], bootstrap_retention_7[\"gate_40\"],alternative = \"greater\")\n",
    "# Print the results\n",
    "print(\"T-Statistic:\", t_statistic)\n",
    "print(\"P-Value:\", p_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04a25741",
   "metadata": {
    "papermill": {
     "duration": 0.007261,
     "end_time": "2023-05-23T15:17:12.545353",
     "exception": false,
     "start_time": "2023-05-23T15:17:12.538092",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Retention_1 : \n",
    "H0 : mean_control >= mean_treatment \n",
    "\n",
    "H1 : mean_control < mean_treatment \n",
    "\n",
    "p_value = 0.05 ; \n",
    "\n",
    "we see that our data p-value as follow : (8.6e-128) < 0.05.\n",
    "Hence, since it's smaller than p-value, we reject H0. We can conclude if there is a **signifiance mean difference between the group**.\n",
    "However, by seeing the graph above, we can see that the **mean difference is getting worst**. So, we will **stay using the gate_30 (control)**\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "### Retention_7 : \n",
    "H0 : mean_control >= mean_treatment \n",
    "\n",
    "H1 : mean_control < mean_treatment\n",
    "\n",
    "p_value = 0.05 \n",
    "\n",
    "we see that our data p-value as follow : (1.3e-227) < 0.05.\n",
    "Hence, since it's smaller than p-value, we reject H0. We can conclude if there is a **signifiance mean difference between the group**.\n",
    "However, by seeing the graph above, we can see that the **mean difference is getting worst**. So, we will **stay using the gate_30 (control)**\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24b6355b",
   "metadata": {
    "papermill": {
     "duration": 0.006974,
     "end_time": "2023-05-23T15:17:12.559838",
     "exception": false,
     "start_time": "2023-05-23T15:17:12.552864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc312b89",
   "metadata": {
    "papermill": {
     "duration": 0.007116,
     "end_time": "2023-05-23T15:17:12.574335",
     "exception": false,
     "start_time": "2023-05-23T15:17:12.567219",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6647163a",
   "metadata": {
    "papermill": {
     "duration": 0.007033,
     "end_time": "2023-05-23T15:17:12.588781",
     "exception": false,
     "start_time": "2023-05-23T15:17:12.581748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.874776,
   "end_time": "2023-05-23T15:17:13.518258",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-05-23T15:16:51.643482",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
